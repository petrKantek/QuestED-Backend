// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using quested_backend.Infrastructure;

namespace quested_backend.Migrations
{
    [DbContext(typeof(QuestedContext))]
    [Migration("20200622214706_InitMigration")]
    partial class InitMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(767)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(767)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(767)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(767)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("quested_backend.Domain.Entities.Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("varchar(45)")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.Property<int>("TeacherId")
                        .HasColumnName("teacher_id")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId")
                        .HasName("fk_class_teacher1_idx");

                    b.ToTable("class");
                });

            modelBuilder.Entity("quested_backend.Domain.Entities.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11)");

                    b.Property<int>("CourseId")
                        .HasColumnName("course_id")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("varchar(45)")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.Property<int>("TeacherId")
                        .HasColumnName("teacher_id")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId")
                        .HasName("fk_course_instance_course1_idx");

                    b.HasIndex("TeacherId")
                        .HasName("fk_course_instance_teacher1_idx");

                    b.ToTable("course");
                });

            modelBuilder.Entity("quested_backend.Domain.Entities.Episode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11)");

                    b.Property<int>("SeasonId")
                        .HasColumnName("season_id")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("varchar(45)")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.HasKey("Id", "SeasonId")
                        .HasName("PRIMARY");

                    b.HasIndex("SeasonId")
                        .HasName("fk_episode_course1_idx");

                    b.ToTable("episode");
                });

            modelBuilder.Entity("quested_backend.Domain.Entities.Pupil", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11)");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnName("firstname")
                        .HasColumnType("varchar(45)")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("pupil");
                });

            modelBuilder.Entity("quested_backend.Domain.Entities.PupilInClass", b =>
                {
                    b.Property<int>("PupilId")
                        .HasColumnName("pupil_id")
                        .HasColumnType("int(11)");

                    b.Property<int>("ClassId")
                        .HasColumnName("class_id")
                        .HasColumnType("int(11)");

                    b.HasKey("PupilId", "ClassId")
                        .HasName("PRIMARY");

                    b.HasIndex("ClassId")
                        .HasName("fk_pupil_has_class_class1_idx");

                    b.HasIndex("PupilId")
                        .HasName("fk_pupil_has_class_pupil1_idx");

                    b.ToTable("pupil_in_class");
                });

            modelBuilder.Entity("quested_backend.Domain.Entities.PupilInCourse", b =>
                {
                    b.Property<int>("CourseId")
                        .HasColumnName("course_id")
                        .HasColumnType("int(11)");

                    b.Property<int>("PupilId")
                        .HasColumnName("pupil_id")
                        .HasColumnType("int(11)");

                    b.HasKey("CourseId", "PupilId")
                        .HasName("PRIMARY");

                    b.HasIndex("CourseId")
                        .HasName("fk_course_instance_has_pupil_course_instance1_idx");

                    b.HasIndex("PupilId")
                        .HasName("fk_course_instance_has_pupil_pupil1_idx");

                    b.ToTable("pupil_in_course");
                });

            modelBuilder.Entity("quested_backend.Domain.Entities.PupilInCourseAnswersQuestion", b =>
                {
                    b.Property<int>("PupilInCourseCourseId")
                        .HasColumnName("pupil_in_course_course_id")
                        .HasColumnType("int(11)");

                    b.Property<int>("PupilInCoursePupilId")
                        .HasColumnName("pupil_in_course_pupil_id")
                        .HasColumnType("int(11)");

                    b.Property<int>("QuestionId")
                        .HasColumnName("question_id")
                        .HasColumnType("int(11)");

                    b.Property<int>("QuestionEpisodeId")
                        .HasColumnName("question_episode_id")
                        .HasColumnType("int(11)");

                    b.Property<int>("QuestionEpisodeSeasonId")
                        .HasColumnName("question_episode_season_id")
                        .HasColumnType("int(11)");

                    b.Property<string>("AchievedPoints")
                        .HasColumnName("achieved_points")
                        .HasColumnType("varchar(45)")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.HasKey("PupilInCourseCourseId", "PupilInCoursePupilId", "QuestionId", "QuestionEpisodeId", "QuestionEpisodeSeasonId")
                        .HasName("PRIMARY");

                    b.HasIndex("PupilInCourseCourseId", "PupilInCoursePupilId")
                        .HasName("fk_pupil_in_course_has_question_pupil_in_course1_idx");

                    b.HasIndex("QuestionId", "QuestionEpisodeId", "QuestionEpisodeSeasonId")
                        .HasName("fk_pupil_in_course_has_question_question1_idx");

                    b.ToTable("pupil_in_course_answers_question");
                });

            modelBuilder.Entity("quested_backend.Domain.Entities.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11)");

                    b.Property<int>("EpisodeId")
                        .HasColumnName("episode_id")
                        .HasColumnType("int(11)");

                    b.Property<int>("EpisodeSeasonId")
                        .HasColumnName("episode_season_id")
                        .HasColumnType("int(11)");

                    b.Property<int?>("MaxPoints")
                        .HasColumnName("max_points")
                        .HasColumnType("int(11)");

                    b.HasKey("Id", "EpisodeId", "EpisodeSeasonId")
                        .HasName("PRIMARY");

                    b.HasIndex("EpisodeId", "EpisodeSeasonId")
                        .HasName("fk_question_episode1_idx");

                    b.ToTable("question");
                });

            modelBuilder.Entity("quested_backend.Domain.Entities.School", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11)");

                    b.Property<string>("Country")
                        .HasColumnName("country")
                        .HasColumnType("varchar(45)")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("varchar(45)")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("school");
                });

            modelBuilder.Entity("quested_backend.Domain.Entities.SchoolOwnsSeason", b =>
                {
                    b.Property<int>("SeasonId")
                        .HasColumnName("season_id")
                        .HasColumnType("int(11)");

                    b.Property<int>("SchoolId")
                        .HasColumnName("school_id")
                        .HasColumnType("int(11)");

                    b.HasKey("SeasonId", "SchoolId")
                        .HasName("PRIMARY");

                    b.HasIndex("SchoolId")
                        .HasName("fk_season_has_school_school1_idx");

                    b.HasIndex("SeasonId")
                        .HasName("fk_season_has_school_season1_idx");

                    b.ToTable("school_owns_season");
                });

            modelBuilder.Entity("quested_backend.Domain.Entities.Season", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("varchar(45)")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("season");
                });

            modelBuilder.Entity("quested_backend.Domain.Entities.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11)");

                    b.Property<string>("Firstname")
                        .HasColumnName("firstname")
                        .HasColumnType("varchar(45)")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.Property<string>("Lastname")
                        .HasColumnName("lastname")
                        .HasColumnType("varchar(45)")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.Property<int>("SchoolId")
                        .HasColumnName("school_id")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId")
                        .HasName("fk_teacher_school1_idx");

                    b.ToTable("teacher");
                });

            modelBuilder.Entity("quested_backend.Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(767)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("varchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("quested_backend.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("quested_backend.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("quested_backend.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("quested_backend.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("quested_backend.Domain.Entities.Class", b =>
                {
                    b.HasOne("quested_backend.Domain.Entities.Teacher", "Teacher")
                        .WithMany("Class")
                        .HasForeignKey("TeacherId")
                        .HasConstraintName("fk_class_teacher1")
                        .IsRequired();
                });

            modelBuilder.Entity("quested_backend.Domain.Entities.Course", b =>
                {
                    b.HasOne("quested_backend.Domain.Entities.Season", "CourseNavigation")
                        .WithMany("Course")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("fk_course_instance_course1")
                        .IsRequired();

                    b.HasOne("quested_backend.Domain.Entities.Teacher", "Teacher")
                        .WithMany("Course")
                        .HasForeignKey("TeacherId")
                        .HasConstraintName("fk_course_instance_teacher1")
                        .IsRequired();
                });

            modelBuilder.Entity("quested_backend.Domain.Entities.Episode", b =>
                {
                    b.HasOne("quested_backend.Domain.Entities.Season", "Season")
                        .WithMany("Episode")
                        .HasForeignKey("SeasonId")
                        .HasConstraintName("fk_episode_course1")
                        .IsRequired();
                });

            modelBuilder.Entity("quested_backend.Domain.Entities.PupilInClass", b =>
                {
                    b.HasOne("quested_backend.Domain.Entities.Class", "Class")
                        .WithMany("PupilInClass")
                        .HasForeignKey("ClassId")
                        .HasConstraintName("fk_pupil_has_class_class1")
                        .IsRequired();

                    b.HasOne("quested_backend.Domain.Entities.Pupil", "Pupil")
                        .WithMany("PupilInClass")
                        .HasForeignKey("PupilId")
                        .HasConstraintName("fk_pupil_has_class_pupil1")
                        .IsRequired();
                });

            modelBuilder.Entity("quested_backend.Domain.Entities.PupilInCourse", b =>
                {
                    b.HasOne("quested_backend.Domain.Entities.Course", "Course")
                        .WithMany("PupilInCourse")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("fk_course_instance_has_pupil_course_instance1")
                        .IsRequired();

                    b.HasOne("quested_backend.Domain.Entities.Pupil", "Pupil")
                        .WithMany("PupilInCourse")
                        .HasForeignKey("PupilId")
                        .HasConstraintName("fk_course_instance_has_pupil_pupil1")
                        .IsRequired();
                });

            modelBuilder.Entity("quested_backend.Domain.Entities.PupilInCourseAnswersQuestion", b =>
                {
                    b.HasOne("quested_backend.Domain.Entities.PupilInCourse", "PupilInCourse")
                        .WithMany("PupilInCourseAnswersQuestion")
                        .HasForeignKey("PupilInCourseCourseId", "PupilInCoursePupilId")
                        .HasConstraintName("fk_pupil_in_course_has_question_pupil_in_course1")
                        .IsRequired();

                    b.HasOne("quested_backend.Domain.Entities.Question", "Question")
                        .WithMany("PupilInCourseAnswersQuestion")
                        .HasForeignKey("QuestionId", "QuestionEpisodeId", "QuestionEpisodeSeasonId")
                        .HasConstraintName("fk_pupil_in_course_has_question_question1")
                        .IsRequired();
                });

            modelBuilder.Entity("quested_backend.Domain.Entities.Question", b =>
                {
                    b.HasOne("quested_backend.Domain.Entities.Episode", "Episode")
                        .WithMany("Question")
                        .HasForeignKey("EpisodeId", "EpisodeSeasonId")
                        .HasConstraintName("fk_question_episode1")
                        .IsRequired();
                });

            modelBuilder.Entity("quested_backend.Domain.Entities.SchoolOwnsSeason", b =>
                {
                    b.HasOne("quested_backend.Domain.Entities.School", "School")
                        .WithMany("SchoolOwnsSeason")
                        .HasForeignKey("SchoolId")
                        .HasConstraintName("fk_season_has_school_school1")
                        .IsRequired();

                    b.HasOne("quested_backend.Domain.Entities.Season", "Season")
                        .WithMany("SchoolOwnsSeason")
                        .HasForeignKey("SeasonId")
                        .HasConstraintName("fk_season_has_school_season1")
                        .IsRequired();
                });

            modelBuilder.Entity("quested_backend.Domain.Entities.Teacher", b =>
                {
                    b.HasOne("quested_backend.Domain.Entities.School", "School")
                        .WithMany("Teacher")
                        .HasForeignKey("SchoolId")
                        .HasConstraintName("fk_teacher_school1")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
